{"version":3,"sources":["../../../../src/components/LoginBox/LoginBox.tsx"],"names":["LoginBox","props","errorText","setErrorText","React","useState","successText","setSuccessText","isSubmitting","setIsSubmitting","mode","setMode","defaultMode","ModeType","Login","control","setValue","handleSubmit","errors","style","SignUp","idField","args","nativeEvent","text","position","top","right","userId","Forgot","password","width","formData","submitRet","accountId","error","jwtData","afterSubmit","retObj","success"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport tailwind from 'tailwind-rn';\nimport { Text, View, Button } from 'react-native-web';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  UserIcon,\n  PasswordIcon,\n  ModeType,\n  Container,\n  TouchableText,\n  LightTextLink,\n  UserIconBox,\n  PasswordIconBox,\n  TextField,\n  onSubmit,\n  idField,\n  FormData,\n  JwtData,\n  onSubmitInterface\n} from './LoginBoxUtils';\n// import { H3 } from 'es5-html-elements';\n\nexport interface afterSubmitInterface {\n  error?: string\n  success?: string\n}\ninterface Props {\n  accountId: string\n  afterSubmit?: (jwtData: JwtData | null) => afterSubmitInterface\n  style?: object\n  defaultMode?: 'Log In' | 'Sign Up' | 'Reset Password'\n}\nfunction LoginBox(props: Props) {\n  const [errorText, setErrorText] = React.useState('');\n  const [successText, setSuccessText] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [mode, setMode] = React.useState(props.defaultMode ?? ModeType.Login);\n  const { control, setValue, handleSubmit, errors } = useForm();\n\n  return (\n    <Container testID=\"authui-container\" style={props.style}>\n      <Text style={tailwind('text-2xl mb-3')}>{mode}</Text>\n      {mode === ModeType.SignUp ? (\n        <Text>\n          Already a user? <TouchableText testID=\"authui-login-link\" onPress={() => setMode(ModeType.Login)}>Log In</TouchableText>\n        </Text>\n      ) : (\n        <Text>\n          New user? <TouchableText testID=\"authui-signup-link\" onPress={() => setMode(ModeType.SignUp)}>Sign Up</TouchableText>\n        </Text>\n      )}\n      <View style={tailwind('mt-2 mb-2')} testID=\"authui-form\">\n        <UserIconBox>\n          <UserIcon />\n        </UserIconBox>\n        <Controller\n          as={(props: any) => <TextField placeholder={idField} testID=\"userId\" {...props} />}\n          control={control}\n          name=\"userId\"\n          onChange={args => args[0].nativeEvent.text}\n          defaultValue=\"\"\n        />\n        <LightTextLink accessible={false} testID=\"clear-user-id\" style={{ position: 'absolute', top: 16, right: 10 }} onPress={() => setValue([{ userId: '' }])}>⨉</LightTextLink>\n\n        {mode !== ModeType.Forgot && (\n          <>\n            <PasswordIconBox>\n              <PasswordIcon />\n            </PasswordIconBox>\n            <Controller\n              as={(props: any) => <TextField placeholder=\"Password\" secureTextEntry={true} testID=\"password\" {...props} />}\n              control={control}\n              name=\"password\"\n              onChange={args => args[0].nativeEvent.text}\n              defaultValue=\"\"\n            />\n            <LightTextLink accessible={false} testID=\"clear-password\" style={{ position: 'absolute', top: 66, right: 10 }} onPress={() => setValue([{ password: '' }])}>⨉</LightTextLink>\n          </>\n        )}\n\n        <View style={tailwind('flex flex-row items-center justify-between mt-2')} testID=\"authui-footer\">\n          <View style={{ width: '60%' }} testID=\"authui-footer-buttons\">\n            <Button\n              testID=\"authui-submit\"\n              title={isSubmitting ? 'Submitting...' : mode}\n              onPress={handleSubmit(async (formData: any) => {\n                const submitRet: onSubmitInterface | null = await onSubmit(\n                  props.accountId,\n                  formData as FormData,\n                  mode,\n                  setIsSubmitting\n                );\n                if (submitRet) {\n                  if (submitRet.error) {\n                    setErrorText(submitRet.error)\n                  } else if (submitRet.jwtData && props.afterSubmit) {\n                    const retObj: afterSubmitInterface = await props.afterSubmit(submitRet.jwtData);\n                    if (retObj) {\n                      setErrorText(retObj.error || '')\n                      setSuccessText(retObj.success || '')\n                    }\n                  }\n                }\n              })}\n            />\n          </View>\n          <View testID=\"authui-forgot\">\n            {mode === ModeType.Login && (\n              <TouchableText onPress={() => setMode(ModeType.Forgot)}>\n                Forgot Password?\n              </TouchableText>\n            )}\n          </View>\n        </View>\n      </View>\n\n      {errorText ? (\n        <Text testID=\"authui-error\" style={tailwind('text-red-600 mt-2')}>{errorText}</Text>\n      ) : (\n        successText ? (\n          <Text testID=\"authui-success\" style={tailwind('text-green-600 mt-2')}>{successText}</Text>\n        ) : (\n          <Text>{' '}</Text>\n        )\n      )}\n    </Container>\n  );\n};\n\nexport default LoginBox;"],"file":"LoginBox.js"}