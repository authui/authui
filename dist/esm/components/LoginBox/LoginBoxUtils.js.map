{"version":3,"sources":["../../../../src/components/LoginBox/LoginBoxUtils.tsx"],"names":["API_BASE","ModeType","IdFieldType","idField","Email","Container","styled","View","TouchableText","props","color","children","LightTextLink","TextField","TextInput","UserIconBox","PasswordIconBox","UserIcon","width","PasswordIcon","validateEmail","email","re","test","onSubmit","accountId","formData","mode","setIsSubmitting","setErrorText","userId","password","Forgot","length","Login","query","login","jwtData","token","e","err","indexOf","SignUp","signup"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components/native';\nimport { Text, TouchableHighlight, TouchableHighlightProps } from 'react-native';\nimport { request } from 'graphql-request';\nimport { decode } from 'jsonwebtoken';\n\nexport const API_BASE = 'https://api.authui.com/';\n// export const API_BASE = 'http://localhost:4001/';\n\nexport interface FormData {\n  userId: string\n  password: string\n}\nexport interface JwtData {\n  uuid?: string\n  accessToken?: string\n  name?: string\n  picUrl?: string\n  username?: string\n  email: string\n  [key: string]: string | undefined\n}\nexport enum ModeType {\n  SignUp = 'Sign Up',\n  Login = 'Log In',\n  Forgot = 'Reset Password'\n}\nexport enum IdFieldType {\n  Username = 'Username',\n  Email = 'Email'\n}\nexport const idField = IdFieldType.Email;\n\nexport const Container = styled.View`\n  padding: 20px 20px;\n  max-width: 500px;\n  margin: 0 auto;\n  border: 1px solid #efefef;\n  border-radius: 6px;\n  background-color: #fff;\n\n  @media (max-width: 768px) {\n    max-width: inherit;\n  }\n`;\nexport interface TouchableTextProps extends TouchableHighlightProps {\n  children?: string | React.ReactElement;\n}\nexport const TouchableText = (props: TouchableTextProps) => (\n  <TouchableHighlight {...props}>\n    <Text style={{ color: 'darkblue' }}>{props.children}</Text>\n  </TouchableHighlight>\n);\nexport const LightTextLink = (props: TouchableTextProps) => (\n  <TouchableHighlight {...props}>\n    <Text style={{ color: 'lightgray' }}>{props.children}</Text>\n  </TouchableHighlight>\n);\nexport const TextField = styled.TextInput`\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  padding: 6px;\n  padding-left: 35px;\n  margin: 10px 0;\n`;\nexport const UserIconBox = styled.View`\n  position: absolute;\n  left: 9px;\n  top: 16px;\n`;\nexport const PasswordIconBox = styled.View`\n  position: absolute;\n  left: 9px;\n  top: 66px;\n`;\n\nexport const UserIcon = (props: any) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" style={{ width: 20 }}>\n    <path d=\"M 25.875 3.40625 C 21.203125 3.492188 18.21875 5.378906 16.9375 8.3125 C 15.714844 11.105469 15.988281 14.632813 16.875 18.28125 C 16.398438 18.839844 16.019531 19.589844 16.15625 20.71875 C 16.304688 21.949219 16.644531 22.824219 17.125 23.4375 C 17.390625 23.773438 17.738281 23.804688 18.0625 23.96875 C 18.238281 25.015625 18.53125 26.0625 18.96875 26.9375 C 19.21875 27.441406 19.503906 27.90625 19.78125 28.28125 C 19.90625 28.449219 20.085938 28.546875 20.21875 28.6875 C 20.226563 29.921875 20.230469 30.949219 20.125 32.25 C 19.800781 33.035156 19.042969 33.667969 17.8125 34.28125 C 16.542969 34.914063 14.890625 35.5 13.21875 36.21875 C 11.546875 36.9375 9.828125 37.8125 8.46875 39.1875 C 7.109375 40.5625 6.148438 42.449219 6 44.9375 L 5.9375 46 L 46.0625 46 L 46 44.9375 C 45.851563 42.449219 44.886719 40.5625 43.53125 39.1875 C 42.175781 37.8125 40.476563 36.9375 38.8125 36.21875 C 37.148438 35.5 35.515625 34.914063 34.25 34.28125 C 33.035156 33.671875 32.269531 33.054688 31.9375 32.28125 C 31.828125 30.964844 31.835938 29.933594 31.84375 28.6875 C 31.976563 28.542969 32.15625 28.449219 32.28125 28.28125 C 32.554688 27.902344 32.816406 27.4375 33.0625 26.9375 C 33.488281 26.0625 33.796875 25.011719 33.96875 23.96875 C 34.28125 23.804688 34.617188 23.765625 34.875 23.4375 C 35.355469 22.824219 35.695313 21.949219 35.84375 20.71875 C 35.976563 19.625 35.609375 18.902344 35.15625 18.34375 C 35.644531 16.757813 36.269531 14.195313 36.0625 11.5625 C 35.949219 10.125 35.582031 8.691406 34.71875 7.5 C 33.929688 6.40625 32.648438 5.609375 31.03125 5.28125 C 29.980469 3.917969 28.089844 3.40625 25.90625 3.40625 Z M 25.90625 5.40625 C 25.917969 5.40625 25.925781 5.40625 25.9375 5.40625 C 27.949219 5.414063 29.253906 6.003906 29.625 6.65625 L 29.875 7.0625 L 30.34375 7.125 C 31.734375 7.316406 32.53125 7.878906 33.09375 8.65625 C 33.65625 9.433594 33.96875 10.519531 34.0625 11.71875 C 34.25 14.117188 33.558594 16.910156 33.125 18.21875 L 32.875 19 L 33.5625 19.40625 C 33.519531 19.378906 33.945313 19.667969 33.84375 20.5 C 33.726563 21.480469 33.492188 21.988281 33.3125 22.21875 C 33.132813 22.449219 33.039063 22.4375 33.03125 22.4375 L 32.1875 22.5 L 32.09375 23.3125 C 32 24.175781 31.652344 25.234375 31.25 26.0625 C 31.046875 26.476563 30.839844 26.839844 30.65625 27.09375 C 30.472656 27.347656 30.28125 27.488281 30.375 27.4375 L 29.84375 27.71875 L 29.84375 28.3125 C 29.84375 29.761719 29.785156 30.949219 29.9375 32.625 L 29.9375 32.75 L 30 32.875 C 30.570313 34.410156 31.890625 35.367188 33.34375 36.09375 C 34.796875 36.820313 36.464844 37.355469 38.03125 38.03125 C 39.597656 38.707031 41.03125 39.515625 42.09375 40.59375 C 42.9375 41.449219 43.46875 42.582031 43.75 44 L 8.25 44 C 8.53125 42.585938 9.058594 41.449219 9.90625 40.59375 C 10.972656 39.515625 12.425781 38.707031 14 38.03125 C 15.574219 37.355469 17.230469 36.820313 18.6875 36.09375 C 20.144531 35.367188 21.492188 34.410156 22.0625 32.875 L 22.125 32.625 C 22.277344 30.949219 22.21875 29.761719 22.21875 28.3125 L 22.21875 27.71875 L 21.6875 27.4375 C 21.777344 27.484375 21.5625 27.347656 21.375 27.09375 C 21.1875 26.839844 20.957031 26.476563 20.75 26.0625 C 20.335938 25.234375 19.996094 24.167969 19.90625 23.3125 L 19.8125 22.5 L 18.96875 22.4375 C 18.960938 22.4375 18.867188 22.449219 18.6875 22.21875 C 18.507813 21.988281 18.273438 21.480469 18.15625 20.5 C 18.058594 19.667969 18.480469 19.378906 18.4375 19.40625 L 19.09375 19 L 18.90625 18.28125 C 17.964844 14.65625 17.800781 11.363281 18.78125 9.125 C 19.757813 6.894531 21.75 5.492188 25.90625 5.40625 Z\" />\n  </svg>\n);\n\nexport const PasswordIcon = (props: any) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 50 50\" style={{ width: 20 }}>\n    {' '}\n    <path d=\"M 25 2 C 17.832484 2 12 7.8324839 12 15 L 12 21 L 8 21 C 6.3550302 21 5 22.35503 5 24 L 5 47 C 5 48.64497 6.3550302 50 8 50 L 42 50 C 43.64497 50 45 48.64497 45 47 L 45 24 C 45 22.35503 43.64497 21 42 21 L 38 21 L 38 15 C 38 7.8324839 32.167516 2 25 2 z M 25 4 C 31.086484 4 36 8.9135161 36 15 L 36 21 L 14 21 L 14 15 C 14 8.9135161 18.913516 4 25 4 z M 8 23 L 42 23 C 42.56503 23 43 23.43497 43 24 L 43 47 C 43 47.56503 42.56503 48 42 48 L 8 48 C 7.4349698 48 7 47.56503 7 47 L 7 24 C 7 23.43497 7.4349698 23 8 23 z M 13 34 A 2 2 0 0 0 11 36 A 2 2 0 0 0 13 38 A 2 2 0 0 0 15 36 A 2 2 0 0 0 13 34 z M 21 34 A 2 2 0 0 0 19 36 A 2 2 0 0 0 21 38 A 2 2 0 0 0 23 36 A 2 2 0 0 0 21 34 z M 29 34 A 2 2 0 0 0 27 36 A 2 2 0 0 0 29 38 A 2 2 0 0 0 31 36 A 2 2 0 0 0 29 34 z M 37 34 A 2 2 0 0 0 35 36 A 2 2 0 0 0 37 38 A 2 2 0 0 0 39 36 A 2 2 0 0 0 37 34 z\" />\n  </svg>\n);\n\nexport const validateEmail = (email: string) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n\nexport const onSubmit = async (\n  accountId: string,\n  formData: FormData,\n  mode: string,\n  setIsSubmitting: React.Dispatch<React.SetStateAction<boolean>>,\n  setErrorText: React.Dispatch<React.SetStateAction<string>>\n): Promise<JwtData | null> => {\n  const { userId, password } = formData;\n  // console.log('formData', formData);\n\n  if (mode === ModeType.Forgot) {\n    if (!userId) {\n      setErrorText(`${idField} is required.`);\n      return null;\n    }  \n  } else {\n    if (!userId || !password) {\n      setErrorText(`${idField} and Password are required.`);\n      return null;\n    }\n  }\n  if (idField === IdFieldType.Email && !validateEmail(formData.userId)) {\n    setErrorText('Invalid email address.');\n    return null;\n  }\n  if (password && password.length < 6) {\n    setErrorText(`Password must be 6 characters or more.`);\n    return null;\n  }\n\n  if (mode === ModeType.Login) {\n    const query = `mutation {\n      login(accountId: \"${accountId}\", email: \"${userId}\", password: \"${password}\") {\n        token\n      }\n    }`;\n    try {\n      setIsSubmitting(true);\n      const { login } = await request(API_BASE, query);\n      setErrorText('');\n      const jwtData: JwtData = decode(login.token) as JwtData;\n      setIsSubmitting(false);\n      return jwtData // logged in successfully!\n    } catch (e) {\n      let err = 'Unknown error.';\n      if (`${e}`.indexOf('Invalid') >= 0 || `${e}`.indexOf('No user found') >= 0) {\n        err = `Invalid ${idField} or Password.`;\n      }\n      setErrorText(`Failed to login. ${err}`);\n    }\n  } else if (mode === ModeType.SignUp) {\n    const query = `mutation {\n      signup(accountId: \"${accountId}\", name: \"Full Name\", email: \"${userId}\", password: \"${password}\") {\n        token\n      }\n    }`;\n    try {\n      setIsSubmitting(true);\n      const { signup } = await request(API_BASE, query);\n      setErrorText('');\n      const jwtData: JwtData = decode(signup.token) as JwtData;\n      setIsSubmitting(false);\n      return jwtData // signed up successfully!\n    } catch (e) {\n      const err = `${e}`.indexOf('Unique constraint failed') >= 0 ? 'User already existed.' : 'Unknown error.';\n      setErrorText(`Failed to sign up. ` + err);\n    }\n  } else if (mode === ModeType.Forgot) {\n    const query = `mutation {\n      resetPassword(accountId: \"${accountId}\", email: \"${userId}\") {\n        token\n      }\n    }`;\n    try {\n      setIsSubmitting(true);\n      await request(API_BASE, query);\n      setErrorText('');\n      setIsSubmitting(false);\n      return null\n    } catch (e) {\n      setErrorText(`Failed to sign up. ` + e);\n    }\n  }\n  setIsSubmitting(false);\n  return null\n};\n"],"file":"LoginBoxUtils.js"}