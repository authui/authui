{"version":3,"sources":["../../../../../src/components/LoginBox/__tests__/LoginBox.spec.tsx"],"names":["describe","it","container","expect","getByTestId","fireEvent"],"mappings":";;;;YACA,wB,EAIA,qB,EACA,sB;;oBALA,wB,WAIA,qB,WACA,sB;;;;;;;;qBALA,M,EAIA,S,EACA,U;;;AANA;AAEA;AAEA;AAIA;AACA;AAEAA,EAAAA,QAAQ,CAAA,UAAA,EAAa,MAAM;AACzBC,IAAAA,EAAE,CAAA,QAAA,EAAW,YAAY;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAgB,CAAA,GAAA,MAAA,CAAA,MAAA,EAAO,CAAA,GAAA,SAAA,CAA7B,SAA6B,GAAP,CAAtB;AACAC,MAAAA,MAAM,CAACD,SAAS,CAAhBC,SAAM,CAANA,CAAAA,OAAAA,CAAAA,uBAAAA;AACAA,MAAAA,MAAM,CAANA,SAAM,CAANA,CAHuB,eAGvBA,GAHuB,CAIvB;AAJFF,KAAE,CAAFA;AAOAA,IAAAA,EAAE,CAAA,uCAAA,EAA0C,YAAY;AACtD,YAAM;AAAA,QAAA,SAAA;AAAaG,QAAAA;AAAb,UAA6B,CAAA,GAAA,MAAA,CAAA,MAAA,EAAO,CAAA,GAAA,SAAA,CAA1C,SAA0C,GAAP,CAAnC;AACAD,MAAAA,MAAM,CAACD,SAAS,CAAhBC,SAAM,CAANA,CAAAA,OAAAA,CAAAA,uBAAAA;AACA,OAAA,GAAA,UAAA,CAAA,GAAA,EAAI,MAAM;AACRE,QAAAA,MAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAgBD,WAAW,CAA3BC,eAA2B,CAA3BA;AADF,OAAA;AAGA,YAAM,CAAA,GAAA,MAAA,CAAA,OAAA,EAAQ,MAAMD,WAAW,CAA/B,cAA+B,CAAzB,CAAN;AAEAD,MAAAA,MAAM,CAANA,SAAM,CAANA,CARsD,eAQtDA,GARsD,CAStD;AATFF,KAAE,CAAFA;AARFD,GAAQ,CAARA","sourcesContent":["// import React from 'react';\nimport { render, fireEvent, waitFor } from '@testing-library/react';\n// import { generateImage } from 'jsdom-screenshot';\n\n// import LoginBox from '../src/components/LoginBox/LoginBox';\nimport { fullWidth } from '../LoginBox.stories';\nimport { act } from 'react-dom/test-utils';\n\n// This test reuses Component (with mocked data) in .stories.tsx file.\n// May need to mock APIs here also.\n\ndescribe('LoginBox', () => {\n  it('render', async () => {\n    const { container } = render(fullWidth());\n    expect(container.innerHTML).toMatch(/placeholder=\\\"Email\\\"/);\n    expect(container).toMatchSnapshot();\n    // (expect(await generateImage()) as any).toMatchImageSnapshot(); // TODO: find a way to inject CSS to puppeteer\n  });\n\n  it('click Submit - validation should fail', async () => {\n    const { container, getByTestId } = render(fullWidth());\n    expect(container.innerHTML).toMatch(/placeholder=\\\"Email\\\"/);\n    act(() => {\n      fireEvent.click(getByTestId('authui-submit'));\n    })\n    await waitFor(() => getByTestId('authui-error'));\n\n    expect(container).toMatchSnapshot();\n    // (expect(await generateImage()) as any).toMatchImageSnapshot();\n  });\n});\n"],"file":"LoginBox.spec.js"}