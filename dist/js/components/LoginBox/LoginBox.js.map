{"version":3,"sources":["../../../../src/components/LoginBox/LoginBox.tsx"],"names":["errorText","setErrorText","React","useState","isSubmitting","setIsSubmitting","mode","setMode","ModeType","SignUp","control","handleSubmit","errors","Login","props","idField","args","nativeEvent","text","width","formData","jwtData","userId","alert"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;AACA;;AAcA;;;;;;;;;;eAEe,MAAM;AACnB,QAAM,CAACA,SAAD,EAAYC,YAAZ,IAA4BC,KAAK,CAACC,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,KAAK,CAACC,QAAN,CAAe,KAAf,CAAxC;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBL,KAAK,CAACC,QAAN,CAAeK,wBAASC,MAAxB,CAAxB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,MAAoC,6BAA1C;AAEA,sBACE,oBAAC,wBAAD,qBACE,oBAAC,mBAAD;AAAI,IAAA,KAAK,EAAE,yBAAS,UAAT;AAAX,KAAkCN,IAAlC,CADF,EAEGA,IAAI,KAAKE,wBAASC,MAAlB,gBACC,oBAAC,aAAD,yCACkB,oBAAC,4BAAD;AAAe,IAAA,OAAO,EAAE,MAAMF,OAAO,CAACC,wBAASK,KAAV;AAArC,aADlB,CADD,gBAKC,oBAAC,aAAD,mCACY,oBAAC,4BAAD;AAAe,IAAA,OAAO,EAAE,MAAMN,OAAO,CAACC,wBAASC,MAAV;AAArC,eADZ,CAPJ,eAWE,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,yBAAS,WAAT;AAAb,kBACE,oBAAC,0BAAD,qBACE,oBAAC,uBAAD,OADF,CADF,eAIE,oBAAC,yBAAD;AACE,IAAA,EAAE,EAAGK,KAAD,iBAAgB,oBAAC,wBAAD;AAAW,MAAA,WAAW,EAAEC,sBAAxB;AAAiC,MAAA,MAAM,EAAC;AAAxC,OAAqDD,KAArD,EADtB;AAEE,IAAA,OAAO,EAAEJ,OAFX;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,QAAQ,EAAEM,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,CAAoBC,IAJxC;AAKE,IAAA,YAAY,EAAC;AALf,IAJF,eAYE,oBAAC,8BAAD,qBACE,oBAAC,2BAAD,OADF,CAZF,eAeE,oBAAC,yBAAD;AACE,IAAA,EAAE,EAAGJ,KAAD,iBAAgB,oBAAC,wBAAD;AAAW,MAAA,WAAW,EAAC,UAAvB;AAAkC,MAAA,eAAe,EAAE,IAAnD;AAAyD,MAAA,MAAM,EAAC;AAAhE,OAA+EA,KAA/E,EADtB;AAEE,IAAA,OAAO,EAAEJ,OAFX;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,QAAQ,EAAEM,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,CAAoBC,IAJxC;AAKE,IAAA,YAAY,EAAC;AALf,IAfF,eAsBE,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,yBAAS,iDAAT;AAAb,kBACE,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAb,kBACE,oBAAC,eAAD;AACE,IAAA,MAAM,EAAC,WADT;AAEE,IAAA,KAAK,EAAEf,YAAY,GAAG,eAAH,GAAqBE,IAAI,KAAKE,wBAASC,MAAlB,GAA2B,SAA3B,GAAuC,QAFjF;AAGE,IAAA,OAAO,EAAEE,YAAY,CAAC,MAAOS,QAAP,IAAyB;AAC7C,YAAMC,OAAuB,GAAG,MAAM,6BACpCD,QADoC,EAEpCd,IAFoC,EAGpCD,eAHoC,EAIpCJ,YAJoC,CAAtC;;AAMA,UAAIoB,OAAO,IAAIA,OAAO,CAACC,MAAvB,EAA+B;AAC7BC,QAAAA,KAAK,CAAE,gCAA+BF,OAAO,CAACC,MAAO,EAAhD,CAAL;AACD;AACF,KAVoB;AAHvB,IADF,CADF,CAtBF,CAXF,eA2DE,oBAAC,aAAD;AAAM,IAAA,KAAK,EAAE,yBAAS,mBAAT;AAAb,KAA6CtB,SAAS,IAAI,GAA1D,CA3DF,CADF;AA+DD,C","sourcesContent":["import * as React from 'react';\nimport tailwind from 'tailwind-rn';\nimport { Text, View, Button } from 'react-native';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  UserIcon,\n  PasswordIcon,\n  ModeType,\n  Container,\n  TouchableText,\n  UserIconBox,\n  PasswordIconBox,\n  TextField,\n  onSubmit,\n  idField,\n  FormData,\n  JwtData\n} from './LoginBoxUtils';\nimport { H3 } from 'es5-html-elements';\n\nexport default () => {\n  const [errorText, setErrorText] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [mode, setMode] = React.useState(ModeType.SignUp);\n  const { control, handleSubmit, errors } = useForm();\n\n  return (\n    <Container>\n      <H3 style={tailwind('text-2xl')}>{mode}</H3>\n      {mode === ModeType.SignUp ? (\n        <Text>\n          Already a user? <TouchableText onPress={() => setMode(ModeType.Login)}>Login</TouchableText>\n        </Text>\n      ) : (\n        <Text>\n          New user? <TouchableText onPress={() => setMode(ModeType.SignUp)}>Sign Up</TouchableText>\n        </Text>\n      )}\n      <View style={tailwind('mt-2 mb-2')}>\n        <UserIconBox>\n          <UserIcon />\n        </UserIconBox>\n        <Controller\n          as={(props: any) => <TextField placeholder={idField} testID=\"userId\" {...props} />}\n          control={control}\n          name=\"userId\"\n          onChange={args => args[0].nativeEvent.text}\n          defaultValue=\"\"\n        />\n\n        <PasswordIconBox>\n          <PasswordIcon />\n        </PasswordIconBox>\n        <Controller\n          as={(props: any) => <TextField placeholder=\"Password\" secureTextEntry={true} testID=\"password\" {...props} />}\n          control={control}\n          name=\"password\"\n          onChange={args => args[0].nativeEvent.text}\n          defaultValue=\"\"\n        />\n        <View style={tailwind('flex flex-row items-center justify-between mt-2')}>\n          <View style={{ width: '40%' }}>\n            <Button\n              testID=\"submitBtn\"\n              title={isSubmitting ? 'Submitting...' : mode === ModeType.SignUp ? 'Sign Up' : 'Log In'}\n              onPress={handleSubmit(async (formData: any) => {\n                const jwtData: JwtData | null = await onSubmit(\n                  formData as FormData,\n                  mode,\n                  setIsSubmitting,\n                  setErrorText\n                );\n                if (jwtData && jwtData.userId) {\n                  alert(`Log in successfully! UserId: ${jwtData.userId}`);\n                }\n              })}\n            />\n          </View>\n          {/* {mode === ModeType.Login && (\n            <TouchableText onPress={() => {}}>\n              Forgot Password?\n            </TouchableText>\n          )} */}\n        </View>\n      </View>\n\n      <Text style={tailwind('text-red-600 mt-2')}>{errorText || ' '}</Text>\n    </Container>\n  );\n};\n"],"file":"LoginBox.js"}