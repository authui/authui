{"version":3,"sources":["../../../../src/components/LoginBox/LoginBox.tsx"],"names":["LoginBox","props","errorText","setErrorText","React","useState","isSubmitting","setIsSubmitting","mode","setMode","ModeType","SignUp","control","handleSubmit","errors","Login","idField","args","nativeEvent","text","width","formData","jwtData","afterSubmit"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport tailwind from 'tailwind-rn';\nimport { Text, View, Button } from 'react-native';\nimport { useForm, Controller } from 'react-hook-form';\nimport {\n  UserIcon,\n  PasswordIcon,\n  ModeType,\n  Container,\n  TouchableText,\n  UserIconBox,\n  PasswordIconBox,\n  TextField,\n  onSubmit,\n  idField,\n  FormData,\n  JwtData\n} from './LoginBoxUtils';\n// import { H3 } from 'es5-html-elements';\n\ninterface Props {\n  afterSubmit?: (jwtData: JwtData | null) => void\n}\nfunction LoginBox(props: Props) {\n  const [errorText, setErrorText] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [mode, setMode] = React.useState(ModeType.SignUp);\n  const { control, handleSubmit, errors } = useForm();\n\n  return (\n    <Container>\n      <Text style={tailwind('text-2xl mb-3')}>{mode}</Text>\n      {mode === ModeType.SignUp ? (\n        <Text>\n          Already a user? <TouchableText onPress={() => setMode(ModeType.Login)}>Login</TouchableText>\n        </Text>\n      ) : (\n        <Text>\n          New user? <TouchableText onPress={() => setMode(ModeType.SignUp)}>Sign Up</TouchableText>\n        </Text>\n      )}\n      <View style={tailwind('mt-2 mb-2')}>\n        <UserIconBox>\n          <UserIcon />\n        </UserIconBox>\n        <Controller\n          as={(props: any) => <TextField placeholder={idField} testID=\"userId\" {...props} />}\n          control={control}\n          name=\"userId\"\n          onChange={args => args[0].nativeEvent.text}\n          defaultValue=\"\"\n        />\n\n        <PasswordIconBox>\n          <PasswordIcon />\n        </PasswordIconBox>\n        <Controller\n          as={(props: any) => <TextField placeholder=\"Password\" secureTextEntry={true} testID=\"password\" {...props} />}\n          control={control}\n          name=\"password\"\n          onChange={args => args[0].nativeEvent.text}\n          defaultValue=\"\"\n        />\n        <View style={tailwind('flex flex-row items-center justify-between mt-2')}>\n          <View style={{ width: '40%' }}>\n            <Button\n              testID=\"submitBtn\"\n              title={isSubmitting ? 'Submitting...' : mode === ModeType.SignUp ? 'Sign Up' : 'Log In'}\n              onPress={handleSubmit(async (formData: any) => {\n                const jwtData: JwtData | null = await onSubmit(\n                  formData as FormData,\n                  mode,\n                  setIsSubmitting,\n                  setErrorText\n                );\n                if (props.afterSubmit) {\n                  props.afterSubmit(jwtData);\n                }\n              })}\n            />\n          </View>\n          {/* {mode === ModeType.Login && (\n            <TouchableText onPress={() => {}}>\n              Forgot Password?\n            </TouchableText>\n          )} */}\n        </View>\n      </View>\n\n      <Text style={tailwind('text-red-600 mt-2')}>{errorText || ' '}</Text>\n    </Container>\n  );\n};\n\nexport default LoginBox;"],"file":"LoginBox.js"}